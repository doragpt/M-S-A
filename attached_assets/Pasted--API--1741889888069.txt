以下は、現在のエラーの原因の大半がフロントエンド側で呼び出している API のパス名と、バックエンドで実装されているエンドポイント名が一致していないことに起因している可能性が高いです。

たとえば、あなたの JavaScript 内では以下のエンドポイントを呼び出しています：

- **`/api/data/latest`**  
- **`/api/ranking/top`**  
- **`/api/area-stats`**  
- **`/api/stores`**

しかし、バックエンド（app.py など）の実装では、実際に存在するのはたとえば：

- `/api/data` （各店舗の最新レコード＋集計情報）
- `/api/ranking/average` （店舗の平均稼働率ランキング）
- `/api/ranking/genre` （業種内ジャンルランキング）
- `/api/aggregated` （日次集計データ）

などとなっており、上記の「latest」「top」「area-stats」「stores」といったエンドポイントは実装されていません。

そこで、以下のように修正する具体例を示します。

---

## ① ファイル：**integrated_dashboard.html**

### (1) API呼び出しのパスを修正する

#### 例1：最新データ取得

【修正前】  
```js
const latestData = await fetchWithRetry("/api/data/latest", {}, 3, 2000);
```

【修正後】  
```js
const latestData = await fetchWithRetry("/api/data", {}, 3, 2000);
```

※　※　この変更は updateIndustryDropdown や updateIndustryRanking 内で使用している箇所すべてに適用してください。

---

#### 例2：トップランキングの取得

【修正前】  
```js
const responseJson = await fetchWithRetry("/api/ranking/top", {}, 3, 2000);
```

【修正後】  
```js
const responseJson = await fetchWithRetry("/api/ranking/average", {}, 3, 2000);
```

※　updateTop10Chart 内の fetch URL を上記のように修正してください。

---

#### 例3：エリア統計の取得

【修正前】  
```js
const areaData = await fetchWithRetry("/api/area-stats", {}, 3, 2000);
```

【修正後】  
```js
const areaData = await fetchWithRetry("/api/aggregated", {}, 3, 2000);
```

※　ただし、もし本来エリアごとの集計を別途実装したい場合は、バックエンド側で新たに `/api/area-stats` のルートを追加するか、ここで `/api/aggregated` の結果からエリアごとに再集計する必要があります。

---

#### 例4：店舗リスト取得

【修正前】  
```js
const stores = await fetchWithRetry("/api/stores", {}, 3, 2000);
```

【修正後】  
```js
// 既存の最新データから各店舗名を抽出する
const allData = await fetchWithRetry("/api/data", {}, 3, 2000);
const stores = Array.isArray(allData) ? allData : (allData.data || []);
```

※　その後、`stores.map(item => item.store_name)` で重複を除く処理を行います。

---

## ② バックエンド側（app.py など）の確認

もし、フロント側で使っているエンドポイント名にこだわる場合は、以下のようにバックエンド側に新たなルートを追加することも可能です。

### 例：`/api/data/latest` を実装する

app.py に以下のようなエンドポイントを追加する方法です（ただし重複する処理になるため推奨はしませんが、フロント側の修正が難しい場合の対処策です）：

```python
@app.route('/api/data/latest')
def api_data_latest():
    # ここでは /api/data と同じ処理を実行する
    return api_data()
```

同様に、

- `/api/ranking/top` → `/api/ranking/average` の内容を返すルート  
- `/api/area-stats` → `/api/aggregated` の内容を返すルート  
- `/api/stores` → （/api/data から店舗名だけ抽出した内容を返す）など

と実装することが可能です。ただし、なるべくフロント側の URL を正しいものに変更するほうが将来的な混乱を防げます。

---

## ③ 具体的な変更箇所まとめ

### 【integrated_dashboard.html 内の変更例】

1. **最新データ取得**  
変更対象箇所（例：updateIndustryDropdown 関数内など）  
→ すべての`"/api/data/latest"`を`"/api/data"`に変更

2. **トップランキング取得**  
変更対象箇所：updateTop10Chart 関数内  
→ `fetchWithRetry("/api/ranking/top", ...)` を `fetchWithRetry("/api/ranking/average", ...)` に変更

3. **エリア統計取得**  
変更対象箇所：updateAreaStatistics 関数内  
→ `fetchWithRetry("/api/area-stats", ...)` を `fetchWithRetry("/api/aggregated", ...)` に変更  
※　※　この場合、集計結果（日付毎）が返るので、もしエリア別の統計が必要なら別途実装するか、JS側で再集計する処理を追加

4. **店舗リスト取得**  
変更対象箇所：fillHistoryStoreDropdown 関数内および fillHourlyStoreDropdown 関数内  
→ `fetchWithRetry("/api/stores", ...)` を  
```js
const response = await fetchWithRetry("/api/data", {}, 3, 2000);
const stores = Array.isArray(response) ? response : (response.data || []);
```
に変更し、そこからユニークな店舗名を抽出してください。

---

## ④ まとめ

- まずはフロント側の各 API 呼び出し URL を、バックエンドで実装されているものと整合させる（上記例を参照）。
- もしフロント側の修正が難しい場合は、app.py に新たなエンドポイントを追加して、既存の API をラップする方法もあります。
- また、fetchWithRetry 関数で既に JSON を返すようにしているため、重複して `response.json()` を呼ばないように注意してください。

これらの具体的な変更を加えた上で再度動作確認をお願いします。もしその後もエラーが発生する場合は、発生している具体的なエラーメッセージと該当箇所のコードを教えてください。

---

このようにファイルごとに上記の変更を適用すれば、各機能（統合ダッシュボード、店舗一覧、グラフ、ランキングなど）が正しく動作する可能性が高まります。