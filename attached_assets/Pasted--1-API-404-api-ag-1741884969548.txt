コンソールのエラーメッセージから、主に以下の問題が発生していると考えられます。

1. **APIエンドポイントの404エラー**  
   - フロントエンドで呼び出している `/api/aggregated`、`/api/ranking/average`、`/api/ranking/genre` がサーバ側に存在しない、または正しく実装されていないため、404（Not Found）のエラーが発生しています。  
   - その結果、fetch() のレスポンスがHTML（通常は404エラーページ）になっており、JSONとして解析しようとすると `"Unexpected token '<'"` のエラーが出ています。

2. **DOM要素が見つからないエラー**  
   - 一部で「Cannot set properties of null (setting 'innerHTML')」というエラーが出ています。これは、APIからのデータ取得に失敗して想定外の値が返され、更新対象のDOM要素（例：テーブルのtbody）が正しく取得できなかった可能性があります。

---

### 修正指示

#### ① APIエンドポイントの実装・確認

- **/api/aggregated エンドポイント**  
  - 集計済みデータを返すAPIエンドポイントが正しく実装されているか確認してください。もし未実装であれば、バックエンド（app.py など）に追加してください。  
  - 例:  
    ```python
    @app.route('/api/aggregated')
    def aggregated_data():
        # DBから集計済みデータを取得する処理を実装
        data = AggregatedData.get_aggregated_data()  # 仮の関数名
        return jsonify(data)
    ```
    
- **/api/ranking/average エンドポイント**  
  - 平均稼働ランキングのデータを返すAPIが存在するか確認してください。存在しない場合は、以下のような実装を追加します。  
  - 例:  
    ```python
    @app.route('/api/ranking/average')
    def average_ranking():
        biz_type = request.args.get('biz_type')
        with db.engine.connect() as conn:
            # biz_typeが指定されている場合はフィルタリング
            if biz_type:
                results = AggregatedData.calculate_average_ranking(conn, biz_type)
            else:
                results = AggregatedData.calculate_average_ranking(conn)
        return jsonify(results)
    ```
    
- **/api/ranking/genre エンドポイント**  
  - 業種内ジャンルランキングのためのAPIも、フロントエンドから呼び出されるURLに合わせて実装してください。  
  - 例:  
    ```python
    @app.route('/api/ranking/genre')
    def genre_ranking():
        biz_type = request.args.get('biz_type')
        with db.engine.connect() as conn:
            results = AggregatedData.calculate_genre_ranking(conn, biz_type)
        # 必要に応じてデータの整形
        data = [
            {"genre": r['genre'], "store_count": r['store_count'], "avg_rate": round(r['avg_rate'], 1)}
            for r in results
        ]
        return jsonify(data)
    ```

#### ② フロントエンド側のエラーハンドリング改善

- APIからのレスポンスが404の場合、HTMLのエラーページが返ってくるため、JSONとしてパースしようとしてエラーになる問題があります。  
- 可能であれば、各fetch処理でレスポンスがJSONかどうか確認する処理（例: `response.headers.get("Content-Type")` をチェックする）を追加し、エラーメッセージを出力するかフォールバック処理を行ってください。

#### ③ DOM要素の存在確認

- もし対象のDOM要素が存在しない場合、HTMLのID指定やレンダリングタイミングを確認してください。  
- ただし、多くの場合、APIエラーの影響で想定外のデータが返ってきていることが原因です。APIエンドポイントを正しく実装することで解消される可能性が高いです。

---

### まとめ

- **バックエンド側**: `/api/aggregated`、`/api/ranking/average`、`/api/ranking/genre` の各APIエンドポイントを実装または修正して、正しいJSONデータを返すようにする。  
- **フロントエンド側**: APIレスポンスを適切にハンドルし、404などのエラーがあった場合でも他の機能に影響を及ぼさないようにエラーハンドリングを強化する。  
- **動作確認**: 各エンドポイントに対してブラウザのネットワークタブなどでレスポンス内容を確認し、JSONが正しく返っていることを確認する。

これらの修正を行えば、統合ダッシュボードのすべての機能が正常に表示されるようになるはずです。