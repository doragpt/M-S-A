 [M-S-A] Flaskサーバー外部接続不可およびスクレイピング処理改善について

お疲れ様です。
以下、現在のM-S-Aプロジェクトにおいて、VPS（ConoHa、12GB/6コア）上でFlaskアプリケーションを起動した際に外部から http://163.44.103.167:5000/ にアクセスできない（ERR_CONNECTION_REFUSED）問題と、初回スクレイピング処理中に多数発生しているエラー（Navigation Timeout, Protocol error: No session with given id）についての原因分析と改善策をまとめました。

【現状の問題点】

Flaskサーバーの起動前に同期的な初回スクレイピング処理が実施されている

main.py では、サーバー起動前に初回スクレイピング（サンプルURLの登録および scheduled_scrape() の呼び出し）が実行されています。

この処理中にタイムアウトエラーや「Navigation Timeout Exceeded」エラーが多数発生しており、結果としてサーバーが起動完了するまで時間がかかり、外部アクセス時にプロセスがまだリッスンしていない可能性があります。

外部アクセスへのファイアウォール設定不足

現在のVPSのセキュリティグループおよびOSのファイアウォール設定で、TCPポート5000が外部に対して開放されていない可能性があります。これにより、アプリが正しく0.0.0.0:5000でリッスンしていても、外部からのアクセスが拒否されています。

Pyppeteer（ヘッドレスChrome）のエラー

スクレイピング処理で利用している pyppeteer は、/usr/bin/google-chrome を利用してChromeを起動しています。

複数のURLに対する並列実行時に、「Protocol error (Target.detachFromTarget): No session with given id」や、15秒のタイムアウトエラーが発生しています。

これは、並列実行数（MAX_CONCURRENT_TASKS=14）やタイムアウト設定の影響、もしくはpyppeteerの既知の不具合の可能性が考えられます。

【推奨する改善策および対応手順】

Flaskサーバーの起動方法の見直し

現在の main.py の最後の部分は

python
コピーする
socketio.run(app, host="0.0.0.0", port=5000, debug=True, allow_unsafe_werkzeug=True)
となっています。

本番環境では、debugモードはセキュリティ上の理由からOFFにし、またFlaskの開発サーバーではなく、Gunicorn+Eventlet などのWSGIサーバーを使用することを推奨します。
例:

bash
コピーする
pip install gunicorn eventlet
gunicorn -b 0.0.0.0:5000 -k eventlet -w 1 main:app
初回スクレイピング処理の非同期化または遅延実行

サーバー起動前に同期的にスクレイピングを実行している部分を見直し、起動後にAPSchedulerなどバックグラウンドジョブで実行するように変更してください。

具体例として、main.py の起動処理直後に以下のコードを追加し、起動5秒後に初回スクレイピングを実行する方法が考えられます：

python
コピーする
from datetime import datetime, timedelta
scheduler.add_job(scheduled_scrape, trigger='date', run_date=datetime.now() + timedelta(seconds=5))
また、開発環境用のダミーURL登録部分（example1.com など）は、本番環境では削除またはコメントアウトし、実際にスクレイピング対象とする店舗URLのみを登録してください。

Pyppeteerの設定調整

タイムアウト値を15秒から20秒以上に延長し、リトライ回数も見直してください。

並列実行数 (MAX_CONCURRENT_TASKS) を14から、例えば8〜10に減らすことでChromeセッションの管理負荷を下げ、エラー発生率を低減させることを検討してください。

必要に応じて、pip install -U pyppeteer によるライブラリのアップデートを実施してください。

VPSのネットワーク設定の確認

ConoHaの管理画面にて、対象VPSのセキュリティグループにTCPポート5000のインバウンドルールを追加してください（0.0.0.0/0からのアクセスを許可）。

OS側（例：Ubuntu）のファイアウォール(UFWやiptables)で sudo ufw allow 5000/tcp の設定を行い、ポート5000への外部アクセスが許可されていることを確認してください。

安定運用のためのデーモン化

SSHセッション切断による停止を防ぐため、nohup、screen、tmux、またはsystemdのサービスユニットを用いてアプリケーションを常駐運用してください。
例：

bash
コピーする
nohup python main.py > server.log 2>&1 &
また、プロダクション環境ではGunicorn+Eventletで運用し、Nginx等のリバースプロキシを利用することも検討してください。

動作確認および監視

変更後、まずはローカル（VPS内）で curl http://localhost:5000 を実行し、正常なレスポンスが返るか確認してください。

次に外部からIP:5000へアクセスし、接続が確立するか確認してください。

サーバー起動時のログ（Chrome起動、スクレイピング、APSchedulerのジョブ実行など）をファイルに記録し、エラーが継続的に発生していないか監視してください。

【まとめ】
上記対応策を順次実施することで、FlaskアプリケーションがVPS上で正しく起動し、外部から http://163.44.103.167:5000/ にアクセス可能となるはずです。特に、初回スクレイピング処理によるブロッキングの回避と、VPS側のファイアウォール設定の見直しが鍵となります。

以上、ご確認の上、修正対応をお願いいたします。何か不明点や追加のエラーが発生した場合は、再度ログや状況を共有してください。

よろしくお願いいたします。