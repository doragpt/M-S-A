sqlalchemy.exc.OperationalError
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: store_urls.error_flag
[SQL: SELECT store_urls.id AS store_urls_id, store_urls.store_url AS store_urls_store_url, store_urls.error_flag AS store_urls_error_flag 
FROM store_urls ORDER BY store_urls.id ASC]
(Background on this error at: https://sqlalche.me/e/14/e3q8)

Traceback (most recent call last)
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", line 1900, in _execute_context
self.dialect.do_execute(
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py", line 736, in do_execute
cursor.execute(statement, parameters)
The above exception was the direct cause of the following exception:
File "/root/M-S-A/venv/lib/python3.12/site-packages/flask/app.py", line 2088, in __call__
return self.wsgi_app(environ, start_response)
File "/root/M-S-A/venv/lib/python3.12/site-packages/flask_socketio/__init__.py", line 43, in __call__
return super(_SocketIOMiddleware, self).__call__(environ,
File "/root/M-S-A/venv/lib/python3.12/site-packages/engineio/middleware.py", line 74, in __call__
return self.wsgi_app(environ, start_response)
File "/root/M-S-A/venv/lib/python3.12/site-packages/flask/app.py", line 2073, in wsgi_app
response = self.handle_exception(e)
File "/root/M-S-A/venv/lib/python3.12/site-packages/flask/app.py", line 2070, in wsgi_app
response = self.full_dispatch_request()
File "/root/M-S-A/venv/lib/python3.12/site-packages/flask/app.py", line 1515, in full_dispatch_request
rv = self.handle_user_exception(e)
File "/root/M-S-A/venv/lib/python3.12/site-packages/flask/app.py", line 1513, in full_dispatch_request
rv = self.dispatch_request()
File "/root/M-S-A/venv/lib/python3.12/site-packages/flask/app.py", line 1499, in dispatch_request
return self.ensure_sync(self.view_functions[rule.endpoint])(**req.view_args)
File "/root/M-S-A/app.py", line 957, in manage_store_urls
urls = StoreURL.query.order_by(StoreURL.id.asc()).all()
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py", line 2773, in all
return self._iter().all()
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/orm/query.py", line 2916, in _iter
result = self.session.execute(
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/orm/session.py", line 1714, in execute
result = conn._execute_20(statement, params or {}, execution_options)
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", line 1705, in _execute_20
return meth(self, args_10style, kwargs_10style, execution_options)
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/sql/elements.py", line 334, in _execute_on_connection
return connection._execute_clauseelement(
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", line 1572, in _execute_clauseelement
ret = self._execute_context(
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", line 1943, in _execute_context
self._handle_dbapi_exception(
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", line 2124, in _handle_dbapi_exception
util.raise_(
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/util/compat.py", line 211, in raise_
raise exception
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/engine/base.py", line 1900, in _execute_context
self.dialect.do_execute(
File "/root/M-S-A/venv/lib/python3.12/site-packages/sqlalchemy/engine/default.py", line 736, in do_execute
cursor.execute(statement, parameters)
sqlalchemy.exc.OperationalError: (sqlite3.OperationalError) no such column: store_urls.error_flag
[SQL: SELECT store_urls.id AS store_urls_id, store_urls.store_url AS store_urls_store_url, store_urls.error_flag AS store_urls_error_flag
FROM store_urls ORDER BY store_urls.id ASC]
(Background on this error at: https://sqlalche.me/e/14/e3q8)
The debugger caught an exception in your WSGI application. You can now look at the traceback which led to the error.
To switch between the interactive traceback and the plaintext one, you can click on the "Traceback" headline. From the text traceback you can also create a paste of it. For code execution mouse-over the frame you want to debug and click on the console icon on the right side.

You can execute arbitrary Python code in the stack frames and there are some extra helpers available for introspection:

dump() shows all variables in the frame
dump(obj) dumps all that's known about the object
Brought to you by DON'T PANIC, your friendly Werkzeug powered traceback interpreter.