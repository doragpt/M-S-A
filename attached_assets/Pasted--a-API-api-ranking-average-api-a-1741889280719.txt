(a) フロントエンドの不具合修正:
統合ダッシュボードのスクリプト修正: APIパスの誤りがある場合は正しいエンドポイント名に修正します（例: /api/ranking/averageや/api/aggregatedなどスペルミスに注意）。また、各APIのレスポンスフォーマットに合わせてJS側の処理を点検します。特に/api/historyは現状単純リストを返すため、ページング情報が必要なら/api/history/optimizedを使うなど変更も検討します。
ライブラリ読み込みの確認: テンプレートの<head>または<body>末尾に、利用するCSS/JSライブラリの読み込みタグを追加します。Bootstrapでスタイルを整えているならそのCSS/JSを、グラフ描画でChart.jsを使うならそのCDNを、Socket.IOクライアントは<script src="{{ url_for('static', filename='socket.io.js') }}"></script>（またはCDN）を、それぞれ忘れずに入れます。こうすることでReferenceErrorは解消します。
Socket.IOの接続処理: Socket.IOを有効活用するなら、ダッシュボード読み込み時にvar socket = io(); socket.on('update', fn);を記述し、fn内で各APIを再取得して画面更新する実装を入れます。これにより、スクレイピング完了→サーバから通知→最新データ自動反映が実現します。もし不要または複雑であれば、定期setIntervalで/api/dataなどを叩いて更新する簡易手段も検討できます。
フラッシュメッセージ表示: 全ページ共通でフラッシュメッセージを表示できるよう、例えばbase.htmlレイアウトを作成し上記のwithブロックを含めるか、各テンプレートの適切な位置（フォーム送信後の画面冒頭など）に挿入します。Bootstrapのアラートクラスを適用して視認性を高めます（successは緑、warningは黄、dangerは赤の背景など）。
(b) バックエンドAPIの修正:
/api/historyのレスポンス修正: ページングメタ情報を含めたい場合、現在のコードではresponse辞書を作成しながら返していないバグがあります​
GITHUB.COM
​
GITHUB.COM
。これを修正するには、if 'page' in request.args:ブロック内でreturn jsonify(response)とし、逆にページング無しの場合もresponse = {"data": data, "meta": {"total_count": ..., ...}}の形で統一するのが望ましいです​
GITHUB.COM
​
GITHUB.COM
。前方互換性を考えるなら、既存フロントが配列を期待している場合もあるので、慎重に対応します。最低でもメタ情報が必要な場面ではhistory/optimizedを使うようドキュメント化するか、historyエンドポイント自体にwith_meta等オプションを設けることもできます。
エンドポイントの一貫性: フロント実装を簡素化するため、可能であれば複数のAPIで返却するJSONフォーマットを統一します。例えば全て{"items": [...], "meta": {...}}にするとか、逆に/api/dataもitemsキーにして他と揃えるなどです。これには広範囲な変更になるので、影響分析の上で判断します。今回は大事に至らない範囲でhistoryの不具合修正のみ行い、他はドキュメント整備に留める可能性が高いです。
エラーハンドリング: biz_type必須の/api/ranking/genre以外にも、入力値の検証や例外処理を追加できます。例えば/api/historyで日付パラメータのパースに失敗した際は400を返す、/bulk_add_store_urlsでDB書き込みにエラーが発生した場合も現状はまとめてフラッシュのみですが、API的に使うなら個別に失敗したURLリストを返す等も考えられます（ただ本件では管理画面のフォーム送信なので簡易なメッセージで十分でしょう）。
(c) データベースとパフォーマンス:
インデックス適用: SQLiteを使用する場合、必ずcreate_indices.pyを実行しておきます​
GITHUB.COM
​
GITHUB.COM
。特に店舗数・履歴が増えてきた際、/api/dataのサブクエリJOINや/api/ranking/*の集計クエリの速度に効いてきます。これを自動化するには、アプリ起動時にif not index_exists: create itの処理を入れる方法もありますが、簡便にはREADME等に「初回起動前にcreate_indices.pyを一度回すこと」と記載して対処します。
スケーラビリティ: 現状ではSQLite＋シングルプロセスで問題ありませんが、将来的にデータ量・アクセスが増えたら、データベースをPostgreSQL等に移行することが望ましいです。その際、Flask-SocketIOを使ったリアルタイム通知がスケールアウト構成でも動くようにメッセージキュー(Redis)の導入や、Flask-CachingをRedisモードで利用する設定​
GITHUB.COM
を本番環境では有効化する必要があります（環境変数REDIS_URLの設定により自動でRedisCacheに切替わる実装済み​
GITHUB.COM
）。これらはコード上は対応済なので、運用ドキュメントとして「本番はRedisを用意し、URLを環境変数に設定する」ことを記載しておきます。
メモリ最適化: api_history_optimizedではPython上で全件ロード＆サンプリングしており、データ量次第ではメモリ使用が大きくなります​
GITHUB.COM
​
GITHUB.COM
。数万件なら問題ありませんが、将来的に数百万件規模になるなら、より効率的なクエリ（例えばSQLでサンプリングする、または集計テーブルを別途用意する）を検討します。現段階では想定用途内なので優先度は低いですが、コメントにて注意喚起を残すこともできます。
